
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package config

import "github.com/joernweissenborn/eventual2go"



type UUIDCompleter struct {
	*eventual2go.Completer
}

func NewUUIDCompleter() *UUIDCompleter {
	return &UUIDCompleter{eventual2go.NewCompleter()}
}

func (c *UUIDCompleter) Complete(d UUID) {
	c.Completer.Complete(d)
}

func (c *UUIDCompleter) Future() *UUIDFuture {
	return &UUIDFuture{c.Completer.Future()}
}

type UUIDFuture struct {
	*eventual2go.Future
}

type UUIDCompletionHandler func(UUID) UUID

func (ch UUIDCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(UUID))
	}
}

func (f *UUIDFuture) Then(ch UUIDCompletionHandler) *UUIDFuture {
	return &UUIDFuture{f.Future.Then(ch.toCompletionHandler())}
}

func (f *UUIDFuture) AsChan() chan UUID {
	c := make(chan UUID, 1)
	cmpl := func(d chan UUID) UUIDCompletionHandler {
		return func(e UUID) UUID {
			d <- e
			close(d)
			return e
		}
	}
	ecmpl := func(d chan UUID) eventual2go.ErrorHandler {
		return func(error) (eventual2go.Data, error) {
			close(d)
			return nil, nil
		}
	}
	f.Then(cmpl(c))
	f.Err(ecmpl(c))
	return c
}

type UUIDStreamController struct {
	*eventual2go.StreamController
}

func NewUUIDStreamController() *UUIDStreamController {
	return &UUIDStreamController{eventual2go.NewStreamController()}
}

func (sc *UUIDStreamController) Add(d UUID) {
	sc.StreamController.Add(d)
}

func (sc *UUIDStreamController) Join(s *UUIDStream) {
	sc.StreamController.Join(s.Stream)
}

func (sc *UUIDStreamController) JoinFuture(f *UUIDFuture) {
	sc.StreamController.JoinFuture(f.Future)
}

func (sc *UUIDStreamController) Stream() *UUIDStream {
	return &UUIDStream{sc.StreamController.Stream()}
}

type UUIDStream struct {
	*eventual2go.Stream
}

type UUIDSuscriber func(UUID)

func (l UUIDSuscriber) toSuscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(UUID)) }
}

func (s *UUIDStream) Listen(ss UUIDSuscriber) *eventual2go.Subscription {
	return s.Stream.Listen(ss.toSuscriber())
}

type UUIDFilter func(UUID) bool

func (f UUIDFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(UUID)) }
}

func (s *UUIDStream) Where(f UUIDFilter) *UUIDStream {
	return &UUIDStream{s.Stream.Where(f.toFilter())}
}

func (s *UUIDStream) WhereNot(f UUIDFilter) *UUIDStream {
	return &UUIDStream{s.Stream.WhereNot(f.toFilter())}
}

func (s *UUIDStream) First() *UUIDFuture {
	return &UUIDFuture{s.Stream.First()}
}

func (s *UUIDStream) FirstWhere(f UUIDFilter) *UUIDFuture {
	return &UUIDFuture{s.Stream.FirstWhere(f.toFilter())}
}

func (s *UUIDStream) FirstWhereNot(f UUIDFilter) *UUIDFuture {
	return &UUIDFuture{s.Stream.FirstWhereNot(f.toFilter())}
}

func (s *UUIDStream) AsChan() (c chan UUID) {
	c = make(chan UUID)
	s.Listen(pipeToUUIDChan(c)).Closed().Then(closeUUIDChan(c))
	return
}

func pipeToUUIDChan(c chan UUID) UUIDSuscriber {
	return func(d UUID) {
		c <- d
	}
}

func closeUUIDChan(c chan UUID) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}
