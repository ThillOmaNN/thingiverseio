
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package peer

import "github.com/joernweissenborn/eventual2go"



type PeerCompleter struct {
	*eventual2go.Completer
}

func NewPeerCompleter() *PeerCompleter {
	return &PeerCompleter{eventual2go.NewCompleter()}
}

func (c *PeerCompleter) Complete(d *Peer) {
	c.Completer.Complete(d)
}

func (c *PeerCompleter) Future() *PeerFuture {
	return &PeerFuture{c.Completer.Future()}
}

type PeerFuture struct {
	*eventual2go.Future
}

type PeerCompletionHandler func(*Peer) *Peer

func (ch PeerCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(*Peer))
	}
}

func (f *PeerFuture) Then(ch PeerCompletionHandler) *PeerFuture {
	return &PeerFuture{f.Future.Then(ch.toCompletionHandler())}
}

func (f *PeerFuture) AsChan() chan *Peer {
	c := make(chan *Peer, 1)
	cmpl := func(d chan *Peer) PeerCompletionHandler {
		return func(e *Peer) *Peer {
			d <- e
			close(d)
			return e
		}
	}
	ecmpl := func(d chan *Peer) eventual2go.ErrorHandler {
		return func(error) (eventual2go.Data, error) {
			close(d)
			return nil, nil
		}
	}
	f.Then(cmpl(c))
	f.Err(ecmpl(c))
	return c
}

type PeerStreamController struct {
	*eventual2go.StreamController
}

func NewPeerStreamController() *PeerStreamController {
	return &PeerStreamController{eventual2go.NewStreamController()}
}

func (sc *PeerStreamController) Add(d *Peer) {
	sc.StreamController.Add(d)
}

func (sc *PeerStreamController) Join(s *PeerStream) {
	sc.StreamController.Join(s.Stream)
}

func (sc *PeerStreamController) JoinFuture(f *PeerFuture) {
	sc.StreamController.JoinFuture(f.Future)
}

func (sc *PeerStreamController) Stream() *PeerStream {
	return &PeerStream{sc.StreamController.Stream()}
}

type PeerStream struct {
	*eventual2go.Stream
}

type PeerSuscriber func(*Peer)

func (l PeerSuscriber) toSuscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(*Peer)) }
}

func (s *PeerStream) Listen(ss PeerSuscriber) *eventual2go.Subscription {
	return s.Stream.Listen(ss.toSuscriber())
}

type PeerFilter func(*Peer) bool

func (f PeerFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(*Peer)) }
}

func (s *PeerStream) Where(f PeerFilter) *PeerStream {
	return &PeerStream{s.Stream.Where(f.toFilter())}
}

func (s *PeerStream) WhereNot(f PeerFilter) *PeerStream {
	return &PeerStream{s.Stream.WhereNot(f.toFilter())}
}

func (s *PeerStream) First() *PeerFuture {
	return &PeerFuture{s.Stream.First()}
}

func (s *PeerStream) FirstWhere(f PeerFilter) *PeerFuture {
	return &PeerFuture{s.Stream.FirstWhere(f.toFilter())}
}

func (s *PeerStream) FirstWhereNot(f PeerFilter) *PeerFuture {
	return &PeerFuture{s.Stream.FirstWhereNot(f.toFilter())}
}

func (s *PeerStream) AsChan() (c chan *Peer) {
	c = make(chan *Peer)
	s.Listen(pipeToPeerChan(c)).Closed().Then(closePeerChan(c))
	return
}

func pipeToPeerChan(c chan *Peer) PeerSuscriber {
	return func(d *Peer) {
		c <- d
	}
}

func closePeerChan(c chan *Peer) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}
