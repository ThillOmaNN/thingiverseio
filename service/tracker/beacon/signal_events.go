
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package beacon

import "github.com/joernweissenborn/eventual2go"



type SignalCompleter struct {
	*eventual2go.Completer
}

func NewSignalCompleter() *SignalCompleter {
	return &SignalCompleter{eventual2go.NewCompleter()}
}

func (c *SignalCompleter) Complete(d Signal) {
	c.Completer.Complete(d)
}

func (c *SignalCompleter) Future() *SignalFuture {
	return &SignalFuture{c.Completer.Future()}
}

type SignalFuture struct {
	*eventual2go.Future
}

type SignalCompletionHandler func(Signal) Signal

func (ch SignalCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(Signal))
	}
}

func (f *SignalFuture) Then(ch SignalCompletionHandler) *SignalFuture {
	return &SignalFuture{f.Future.Then(ch.toCompletionHandler())}
}

func (f *SignalFuture) AsChan() chan Signal {
	c := make(chan Signal, 1)
	cmpl := func(d chan Signal) SignalCompletionHandler {
		return func(e Signal) Signal {
			d <- e
			close(d)
			return e
		}
	}
	ecmpl := func(d chan Signal) eventual2go.ErrorHandler {
		return func(error) (eventual2go.Data, error) {
			close(d)
			return nil, nil
		}
	}
	f.Then(cmpl(c))
	f.Err(ecmpl(c))
	return c
}

type SignalStreamController struct {
	*eventual2go.StreamController
}

func NewSignalStreamController() *SignalStreamController {
	return &SignalStreamController{eventual2go.NewStreamController()}
}

func (sc *SignalStreamController) Add(d Signal) {
	sc.StreamController.Add(d)
}

func (sc *SignalStreamController) Join(s *SignalStream) {
	sc.StreamController.Join(s.Stream)
}

func (sc *SignalStreamController) JoinFuture(f *SignalFuture) {
	sc.StreamController.JoinFuture(f.Future)
}

func (sc *SignalStreamController) Stream() *SignalStream {
	return &SignalStream{sc.StreamController.Stream()}
}

type SignalStream struct {
	*eventual2go.Stream
}

type SignalSuscriber func(Signal)

func (l SignalSuscriber) toSuscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(Signal)) }
}

func (s *SignalStream) Listen(ss SignalSuscriber) *eventual2go.Subscription {
	return s.Stream.Listen(ss.toSuscriber())
}

type SignalFilter func(Signal) bool

func (f SignalFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(Signal)) }
}

func (s *SignalStream) Where(f SignalFilter) *SignalStream {
	return &SignalStream{s.Stream.Where(f.toFilter())}
}

func (s *SignalStream) WhereNot(f SignalFilter) *SignalStream {
	return &SignalStream{s.Stream.WhereNot(f.toFilter())}
}

func (s *SignalStream) First() *SignalFuture {
	return &SignalFuture{s.Stream.First()}
}

func (s *SignalStream) FirstWhere(f SignalFilter) *SignalFuture {
	return &SignalFuture{s.Stream.FirstWhere(f.toFilter())}
}

func (s *SignalStream) FirstWhereNot(f SignalFilter) *SignalFuture {
	return &SignalFuture{s.Stream.FirstWhereNot(f.toFilter())}
}

func (s *SignalStream) AsChan() (c chan Signal) {
	c = make(chan Signal)
	s.Listen(pipeToSignalChan(c)).Closed().Then(closeSignalChan(c))
	return
}

func pipeToSignalChan(c chan Signal) SignalSuscriber {
	return func(d Signal) {
		c <- d
	}
}

func closeSignalChan(c chan Signal) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}
