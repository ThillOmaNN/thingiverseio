
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package tracker

import "github.com/joernweissenborn/eventual2go"



type NodeCompleter struct {
	*eventual2go.Completer
}

func NewNodeCompleter() *NodeCompleter {
	return &NodeCompleter{eventual2go.NewCompleter()}
}

func (c *NodeCompleter) Complete(d Node) {
	c.Completer.Complete(d)
}

func (c *NodeCompleter) Future() *NodeFuture {
	return &NodeFuture{c.Completer.Future()}
}

type NodeFuture struct {
	*eventual2go.Future
}

type NodeCompletionHandler func(Node) Node

func (ch NodeCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(Node))
	}
}

func (f *NodeFuture) Then(ch NodeCompletionHandler) *NodeFuture {
	return &NodeFuture{f.Future.Then(ch.toCompletionHandler())}
}

func (f *NodeFuture) AsChan() chan Node {
	c := make(chan Node, 1)
	cmpl := func(d chan Node) NodeCompletionHandler {
		return func(e Node) Node {
			d <- e
			close(d)
			return e
		}
	}
	ecmpl := func(d chan Node) eventual2go.ErrorHandler {
		return func(error) (eventual2go.Data, error) {
			close(d)
			return nil, nil
		}
	}
	f.Then(cmpl(c))
	f.Err(ecmpl(c))
	return c
}

type NodeStreamController struct {
	*eventual2go.StreamController
}

func NewNodeStreamController() *NodeStreamController {
	return &NodeStreamController{eventual2go.NewStreamController()}
}

func (sc *NodeStreamController) Add(d Node) {
	sc.StreamController.Add(d)
}

func (sc *NodeStreamController) Join(s *NodeStream) {
	sc.StreamController.Join(s.Stream)
}

func (sc *NodeStreamController) JoinFuture(f *NodeFuture) {
	sc.StreamController.JoinFuture(f.Future)
}

func (sc *NodeStreamController) Stream() *NodeStream {
	return &NodeStream{sc.StreamController.Stream()}
}

type NodeStream struct {
	*eventual2go.Stream
}

type NodeSuscriber func(Node)

func (l NodeSuscriber) toSuscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(Node)) }
}

func (s *NodeStream) Listen(ss NodeSuscriber) *eventual2go.Subscription {
	return s.Stream.Listen(ss.toSuscriber())
}

type NodeFilter func(Node) bool

func (f NodeFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(Node)) }
}

func (s *NodeStream) Where(f NodeFilter) *NodeStream {
	return &NodeStream{s.Stream.Where(f.toFilter())}
}

func (s *NodeStream) WhereNot(f NodeFilter) *NodeStream {
	return &NodeStream{s.Stream.WhereNot(f.toFilter())}
}

func (s *NodeStream) First() *NodeFuture {
	return &NodeFuture{s.Stream.First()}
}

func (s *NodeStream) FirstWhere(f NodeFilter) *NodeFuture {
	return &NodeFuture{s.Stream.FirstWhere(f.toFilter())}
}

func (s *NodeStream) FirstWhereNot(f NodeFilter) *NodeFuture {
	return &NodeFuture{s.Stream.FirstWhereNot(f.toFilter())}
}

func (s *NodeStream) AsChan() (c chan Node) {
	c = make(chan Node)
	s.Listen(pipeToNodeChan(c)).Closed().Then(closeNodeChan(c))
	return
}

func pipeToNodeChan(c chan Node) NodeSuscriber {
	return func(d Node) {
		c <- d
	}
}

func closeNodeChan(c chan Node) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}
